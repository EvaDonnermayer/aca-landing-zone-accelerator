name: Terraform Deployment
        
on:
    # pull_request:
    #     branches: ["main"]
    #     paths:
    #         - scenarios/aca-internal/terraform
    workflow_dispatch:

permissions:
    id-token: write
    contents: read

env:
    StateStoreContainerName: "tfstate"
    StateStoreFilename: "terraform.tfstate"
    TerraformWorkingDirectory: "./scenarios/aca-internal/terraform"

jobs:
    create-storage:
        runs-on: ubuntu-latest
        if: ${{ vars.createStorage }} == 'true'
        steps:
            - uses: actions/checkout@v3

            - name: Azure Login
              uses: azure/login@v1
              with:
                client-id:  ${{ secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{ secrets.AZURE_TENANT_ID }}

            - name: Create storage account
              shell: pwsh
              working-directory: "./.github/workflows/scripts"
              run: |
                ./scripts/setupStateStore.ps1 `
                 -location ${{ vars.location }} `
                 -resourceGroupName ${{ vars.resourceGroupName }} `
                 -storageAccountName ${{ vars.storageAccountName }}
    validate:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2

            - name: Initialize Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: |
                terraform init `
                    -backend-config=resource_group_name=${{ vars.resourceGroupName}} `
                    -backend-config=storage_account_name=${{ vars.storageAccountName }} `
                    -backend-config=container_name=${{ env.StateStoreContainerName }} `
                    -backend-config=key=${{ env.StateStoreFilename }}

            - name: Validate Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: terraform validate
    plan-and-apply-lza:
        needs: [validate]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2

            - name: Initialize Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: |
                terraform init `
                    -backend-config=resource_group_name=${{ vars.resourceGroupName}} `
                    -backend-config=storage_account_name=${{ vars.storageAccountName }} `
                    -backend-config=container_name=${{ env.StateStoreContainerName }} `
                    -backend-config=key=${{ env.StateStoreFilename }}
            
            - name: Generate registration token
              id: token
              run: |
                token = $(curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{secrets.GitHubPAT }}"\
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/repos/ibersanoMS/devops-app-service/actions/runners/registration-token)
        
                echo regToken=$token >> $GITHUB_OUTPUT
            
            - name: Plan Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: terraform plan -out=tf_plan --var-file="terraform.tfvars" -var runnerToken=${{ steps.token.outputs.regToken }}
            
            - name: Apply Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: terraform apply -auto-approve tf_plan

    # plan-and-apply-ingress:
    #   runs-on: self-hosted
    #   needs: [plan-and-apply-lza]
    #   env:
    #     TerraformWorkingDirectory: "./scenarios/aca-internal/terraform/modules/06-application-gateway"
    #   steps:
    #       - uses: actions/checkout@v3

    #       - name: Setup Terraform
    #         uses: hashicorp/setup-terraform@v2

    #       - name: Initialize Terraform
    #         working-directory: ${{ env.TerraformWorkingDirectory }}
    #         run: |
    #           terraform init `
    #               -backend-config=resource_group_name=${{ vars.resourceGroupName}} `
    #               -backend-config=storage_account_name=${{ vars.storageAccountName }} `
    #               -backend-config=container_name=${{ env.StateStoreContainerName }} `
    #               -backend-config=key=${{ env.StateStoreFilename }}

    #       - name: Plan Terraform
    #         working-directory: ${{ env.TerraformWorkingDirectory }}
    #         run: terraform plan -out=tf_plan --var-file="terraform.tfvars" -var runnerToken=${{ steps.token.outputs.regToken }}
        
    #       - name: Apply Terraform
    #         working-directory: ${{ env.TerraformWorkingDirectory }}
    #         run: terraform apply -auto-approve tf_plan